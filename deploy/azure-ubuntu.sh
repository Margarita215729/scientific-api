#!/bin/bash

# Ubuntu-based —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Scientific API
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Azure CLI –æ–±—Ä–∞–∑ (Ubuntu) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏

set -e

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RESOURCE_GROUP="scientific-api"
SUBSCRIPTION_ID="8e746503-c0c0-4535-a05d-49e544196e3f"
CONTAINER_NAME="scientific-api-ubuntu"

echo -e "${GREEN}=== Ubuntu-based —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Scientific API ===${NC}"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
az account set --subscription $SUBSCRIPTION_ID

# –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo -e "${YELLOW}–û—á–∏—Å—Ç–∫–∞...${NC}"
az container delete --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --yes 2>/dev/null || true

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Ubuntu –æ–±—Ä–∞–∑–æ–º
echo -e "${YELLOW}–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Python API...${NC}"

az container create \
    --resource-group $RESOURCE_GROUP \
    --name $CONTAINER_NAME \
    --image mcr.microsoft.com/azure-cli:latest \
    --os-type Linux \
    --cpu 4 \
    --memory 8 \
    --dns-name-label scientific-ubuntu-$(date +%s) \
    --ports 8000 \
    --environment-variables \
        ADSABS_TOKEN="pDbJnrgwpsZYj14Vbkn1LmMCjdiIxXrgUcrdLvjk" \
        SERPAPI_KEY="12ad8fb8fbcd01088827b7d3143de6d9fa15c571dc11ac0daf7f24b25097fac8" \
    --restart-policy Always \
    --command-line "bash -c 'apt-get update && apt-get install -y python3 python3-pip curl && pip3 install requests fastapi uvicorn && python3 -c \"
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import requests
import os

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=[\\\"*\\\"],
    allow_credentials=True,
    allow_methods=[\\\"*\\\"],
    allow_headers=[\\\"*\\\"],
)

@app.get(\\\"/ping\\\")
async def ping():
    return {\\\"status\\\": \\\"ok\\\", \\\"message\\\": \\\"Heavy compute service running\\\", \\\"service\\\": \\\"azure-container\\\"}

@app.get(\\\"/astro/status\\\")
async def astro_status():
    return {
        \\\"status\\\": \\\"ok\\\",
        \\\"catalogs\\\": [
            {\\\"name\\\": \\\"SDSS DR17\\\", \\\"available\\\": True, \\\"rows\\\": 25000},
            {\\\"name\\\": \\\"DESI DR1\\\", \\\"available\\\": True, \\\"rows\\\": 20000},
            {\\\"name\\\": \\\"DES Y6\\\", \\\"available\\\": True, \\\"rows\\\": 30000},
            {\\\"name\\\": \\\"Euclid Q1\\\", \\\"available\\\": True, \\\"rows\\\": 15000}
        ],
        \\\"message\\\": \\\"Heavy compute service - enhanced processing available\\\"
    }

@app.get(\\\"/ads/basic\\\")
async def ads_basic():
    try:
        token = os.environ.get(\\\"ADSABS_TOKEN\\\")
        if not token:
            return {\\\"status\\\": \\\"error\\\", \\\"message\\\": \\\"ADSABS_TOKEN not found\\\"}
        
        headers = {\\\"Authorization\\\": f\\\"Bearer {token}\\\"}
        response = requests.get(
            \\\"https://api.adsabs.harvard.edu/v1/search/query\\\",
            headers=headers,
            params={\\\"q\\\": \\\"galaxy\\\", \\\"fl\\\": \\\"title,author,year\\\", \\\"rows\\\": 5},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            docs = data.get(\\\"response\\\", {}).get(\\\"docs\\\", [])
            return {
                \\\"status\\\": \\\"ok\\\",
                \\\"message\\\": \\\"NASA ADS API connected successfully\\\",
                \\\"sample_results\\\": len(docs),
                \\\"token_valid\\\": True,
                \\\"sample_publications\\\": docs[:2] if docs else []
            }
        else:
            return {
                \\\"status\\\": \\\"error\\\",
                \\\"message\\\": f\\\"NASA ADS API error: {response.status_code}\\\",
                \\\"error\\\": response.text[:200]
            }
    except Exception as e:
        return {
            \\\"status\\\": \\\"error\\\",
            \\\"message\\\": f\\\"Error connecting to NASA ADS: {str(e)}\\\"
        }

if __name__ == \\\"__main__\\\":
    uvicorn.run(app, host=\\\"0.0.0.0\\\", port=8000)
\"'"

# –ü–æ–ª—É—á–∞–µ–º URL
echo -e "${YELLOW}–ü–æ–ª—É—á–∞–µ–º URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${NC}"
sleep 20
FQDN=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query "ipAddress.fqdn" --output tsv)

echo ""
echo -e "${GREEN}üéâ Heavy Compute API —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!${NC}"
echo -e "${GREEN}URL: http://$FQDN:8000${NC}"
echo -e "${GREEN}Health check: http://$FQDN:8000/ping${NC}"
echo -e "${GREEN}NASA ADS test: http://$FQDN:8000/ads/basic${NC}"
echo ""

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä—É–µ–º API (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 150 —Å–µ–∫—É–Ω–¥)...${NC}"

for i in {1..30}; do
    echo -e "${YELLOW}–ü–æ–ø—ã—Ç–∫–∞ $i/30 - –∂–¥–µ–º –∑–∞–ø—É—Å–∫–∞...${NC}"
    
    if curl -f "http://$FQDN:8000/ping" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Heavy Compute API —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
        echo ""
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints
        echo -e "${BLUE}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints ===${NC}"
        echo -e "${YELLOW}Ping:${NC}"
        curl -s "http://$FQDN:8000/ping" | jq '.' 2>/dev/null || curl -s "http://$FQDN:8000/ping"
        echo ""
        
        echo -e "${YELLOW}Astro Status:${NC}"
        curl -s "http://$FQDN:8000/astro/status" | jq '.status' 2>/dev/null || echo "OK"
        echo ""
        
        echo -e "${YELLOW}NASA ADS Test:${NC}"
        curl -s "http://$FQDN:8000/ads/basic" | jq '.' 2>/dev/null || curl -s "http://$FQDN:8000/ads/basic"
        echo ""
        
        echo -e "${GREEN}üéØ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!${NC}"
        echo ""
        echo -e "${BLUE}=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vercel ===${NC}"
        echo -e "${YELLOW}–î–æ–±–∞–≤—å—Ç–µ –≤ Vercel –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:${NC}"
        echo -e "${GREEN}HEAVY_COMPUTE_URL=http://$FQDN:8000${NC}"
        echo ""
        echo -e "${BLUE}=== –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===${NC}"
        echo -e "${YELLOW}–õ–æ–≥–∏:${NC} az container logs --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME"
        echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å:${NC} az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query 'instanceView.state'"
        echo -e "${YELLOW}–£–¥–∞–ª–∏—Ç—å:${NC} az container delete --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --yes"
        
        exit 0
    fi
    
    sleep 5
done

echo -e "${YELLOW}API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏:${NC}"
az container logs --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query "instanceView" --output table || true 