#!/bin/bash\n\n# Script to manage data pipelines for the Scientific API\n# (e.g., ensure DB/collections exist, trigger data preprocessing)\n\nset -e # Exit immediately if a command exits with a non-zero status.\n\n# --- Configuration ---\n# Load from deploy.env or set directly\nif [ -f deploy.env ]; then\n    echo \" sourcing environment variables from deploy.env\"\n    export $(grep -v \'^#\' deploy.env | xargs)\nfi\n\nAZURE_RESOURCE_GROUP=\"${AZURE_RESOURCE_GROUP:?Please set AZURE_RESOURCE_GROUP}\"\nCOSMOS_DB_ACCOUNT_NAME=\"${COSMOS_DB_ACCOUNT_NAME:?Please set COSMOS_DB_ACCOUNT_NAME}\" # –ò–º—è –≤–∞—à–µ–≥–æ Cosmos DB –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, scientific-api-server\nCOSMOS_DB_DATABASE_NAME=\"${COSMOS_DATABASE_NAME:?Please set COSMOS_DATABASE_NAME}\"\nWEB_APP_NAME=\"${AZURE_APP_NAME:?Please set AZURE_APP_NAME}\" # –ò–º—è –≤–∞—à–µ–≥–æ Web App, –Ω–∞–ø—Ä–∏–º–µ—Ä, scientific-api\n\n# –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\nWEB_APP_URL=\"https://$(az webapp show --resource-group \"$AZURE_RESOURCE_GROUP\" --name \"$WEB_APP_NAME\" --query \"defaultHostName\" -o tsv)\"\n\nif [ -z \"$WEB_APP_URL\" ] || [ \"$WEB_APP_URL\" == \"https\" ]; then\n    echo \"‚ùå Error: Could not retrieve Web App URL for \'$WEB_APP_NAME\'. Please ensure it is deployed and running.\" >&2\n    exit 1\nfi\n\n# –ö–æ–ª–ª–µ–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å (–∏ –∏—Ö shard keys)\n# –§–æ—Ä–º–∞—Ç: \"collection_name:shard_key_path\"\n# Shard key path –¥–ª—è MongoDB —ç—Ç–æ –∏–º—è –ø–æ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, \"user_id\", –Ω–µ \"/user_id\"\ndeclare -A COLLECTIONS_TO_ENSURE=(\n    [\"users\"]=\"username\" \n    [\"api_keys\"]=\"user_id\"\n    [\"astronomical_objects\"]=\"catalog_source\"\n    [\"astronomical_data\"]=\"object_id\"\n    [\"search_history\"]=\"user_id\"\n    [\"ml_analysis_results\"]=\"user_id\"\n    [\"api_cache\"]=\"_id\" # _id —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ shard key –¥–ª—è –∫—ç—à–∞\n    [\"system_statistics\"]=\"metric_name\"\n)\n\n# --- Functions ---\n\ncheck_azure_login() {\n    echo \"\nüîó Checking Azure login status...\"\n    if ! az account show &> /dev/null; then\n        echo \"   Attempting to login to Azure...\"\n        az login --use-device-code\n    fi\n    echo \"   Azure login verified.\"\n}\n\nensure_database_exists() {\n    echo \"\nÁ°Æ‰øùÊï∞ÊçÆÂ∫ì \'$COSMOS_DB_DATABASE_NAME\' –≤ –∞–∫–∫–∞—É–Ω—Ç–µ \'$COSMOS_DB_ACCOUNT_NAME\' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...\"\n    if az cosmosdb mongodb database show --account-name \"$COSMOS_DB_ACCOUNT_NAME\" --name \"$COSMOS_DB_DATABASE_NAME\" --resource-group \"$AZURE_RESOURCE_GROUP\" &> /dev/null; then\n        echo \"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö \'$COSMOS_DB_DATABASE_NAME\' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\"\n    else\n        echo \"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö \'$COSMOS_DB_DATABASE_NAME\' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∏–µ...\"\n        az cosmosdb mongodb database create --account-name \"$COSMOS_DB_ACCOUNT_NAME\" --name \"$COSMOS_DB_DATABASE_NAME\" --resource-group \"$AZURE_RESOURCE_GROUP\"\n        echo \"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö \'$COSMOS_DB_DATABASE_NAME\' —Å–æ–∑–¥–∞–Ω–∞.\"\n    fi\n}\n\nensure_collections_exist() {\n    echo \"\nÁ°Æ‰øù –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã shard keys...\"\n    for collection_name in \"${!COLLECTIONS_TO_ENSURE[@]}\"; do\n        shard_key_path=\"${COLLECTIONS_TO_ENSURE[$collection_name]}\"\n        echo \"  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: \'$collection_name\' —Å shard key: \'$shard_key_path\'...\"\n        \n        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è\n        if az cosmosdb mongodb collection show --account-name \"$COSMOS_DB_ACCOUNT_NAME\" --database-name \"$COSMOS_DB_DATABASE_NAME\" --name \"$collection_name\" --resource-group \"$AZURE_RESOURCE_GROUP\" &> /dev/null; then\n            echo \"    ‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è \'$collection_name\' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\"\n            # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ shard key –æ–∂–∏–¥–∞–µ–º–æ–º—É, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ —á–µ—Ä–µ–∑ CLI\n        else\n            echo \"    –ö–æ–ª–ª–µ–∫—Ü–∏—è \'$collection_name\' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∏–µ —Å shard key \'$shard_key_path\'...\"\n            # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: --shard \"$shard_key_path\" –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –∏–ª–∏ –±—ã–ª–æ —á–∞—Å—Ç—å—é _id.\n            # –î–ª—è Cosmos DB MongoDB API, shard key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n            # –ï—Å–ª–∏ shard_key_path —ç—Ç–æ \"_id\", —Ç–æ Cosmos DB –æ–±—ã—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n            az cosmosdb mongodb collection create \\\n                --account-name \"$COSMOS_DB_ACCOUNT_NAME\" \\\n                --database-name \"$COSMOS_DB_DATABASE_NAME\" \\\n                --name \"$collection_name\" \\\n                --resource-group \"$AZURE_RESOURCE_GROUP\" \\\n                --shard \"$shard_key_path\" \\\n                --throughput 400 # –£–∫–∞–∂–∏—Ç–µ throughput –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ serverless/autoscale\n            echo \"    ‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è \'$collection_name\' —Å–æ–∑–¥–∞–Ω–∞.\"\n        fi\n    done\n}\n\ntrigger_api_endpoint() {\n    local endpoint_path=\"$1\"\n    local description=\"$2\"\n    local method=\"${3:-POST}\" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é POST\n    local payload_json=\"${4:-{\}}\" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π JSON\n\n    echo \"\n TRIGGERING: $description ($method $WEB_APP_URL$endpoint_path)\"\n    \n    response=$(curl -s -X \"$method\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"$payload_json\" \\\n        \"$WEB_APP_URL$endpoint_path\" \\\n        -w \"\\nHTTP_STATUS_CODE:%{http_code}\")\n    \n    http_status=$(echo \"$response\" | sed -n \'s/.*HTTP_STATUS_CODE://p\')\n    body=$(echo \"$response\" | sed \'s/HTTP_STATUS_CODE:.*//\')\n\n    echo \"   Response Body: $body\"\n    echo \"   HTTP Status: $http_status\"\n\n    if [[ \"$http_status\" -ge 200 && \"$http_status\" -lt 300 ]]; then\n        echo \"   ‚úÖ $description —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω(–∞).\"\n        task_id=$(echo \"$body\" | jq -r \'.task_id // .job_id // \"unknown_task_id\"\')\n        echo \"   Task ID: $task_id\"\n        if [ \"$task_id\" != \"unknown_task_id\" ] && [ \"$task_id\" != \"null\" ]; then\n            monitor_task \"$task_id\"\n        fi\n    else\n        echo \"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ $description. –°—Ç–∞—Ç—É—Å: $http_status\"\n    fi\n}\n\nmonitor_task() {\n    local task_id=\"$1\"\n    echo \"   üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ \'$task_id\'... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)\"\n    \n    local status=\"started\"\n    local progress=0\n    local attempts=0\n    local max_attempts=60 # –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª 5 —Å–µ–∫)\n\n    while [[ \"$status\" != \"completed\" && \"$status\" != \"failed\" && \"$attempts\" -lt \"$max_attempts\" ]]; do\n        sleep 10 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n        attempts=$((attempts+1))\n        \n        task_info=$(curl -s -X GET \"$WEB_APP_URL/api/heavy/task-status/$task_id\")\n        status=$(echo \"$task_info\" | jq -r \'.status // \"unknown\"\')\n        progress=$(echo \"$task_info\" | jq -r \'.progress // 0\')\n        message=$(echo \"$task_info\" | jq -r \'.message // \"-\"\')\n        \n        echo \"    [–ü–æ–ø—ã—Ç–∫–∞ $attempts/$max_attempts] –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ \'$task_id\': $status ($progress%) - $message\"\n        \n        if [[ \"$status\" == \"completed\" ]]; then\n            echo \"   ‚úÖ –ó–∞–¥–∞—á–∞ \'$task_id\' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\"\n            echo \"   –î–µ—Ç–∞–ª–∏: $task_info\"\n            break\n        elif [[ \"$status\" == \"failed\" ]]; then\n            echo \"   ‚ùå –ó–∞–¥–∞—á–∞ \'$task_id\' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.\"\n            echo \"   –î–µ—Ç–∞–ª–∏: $task_info\"\n            break\n        fi\n    done\n    if [[ \"$attempts\" -ge \"$max_attempts\" ]]; then\n        echo \"   ‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ \'$task_id\' –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.\"\n    fi\n}\n\n# --- Main Script Logic ---\ncheck_azure_login\n\n# 1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ë–î –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç\n# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—è–ª —Å–æ–∑–¥–∞–Ω–∏–µ–º –ë–î/–∫–æ–ª–ª–µ–∫—Ü–∏–π.\n# –í–Ω–∏–º–∞–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å shard key –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –∞–∫–∫–∞—É–Ω—Ç Cosmos DB\n# –±—ã–ª —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è serverless/autoscale.\n# echo \"--- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π ---\"\n# ensure_database_exists\n# ensure_collections_exist\n\necho \"\n--- –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ ---\"\ntrigger_api_endpoint \"/api/heavy/astro/trigger-preprocessing\" \"–ü–æ–ª–Ω—ã–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–æ–≤\"\n\n# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n# echo \"\n--- –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä: –æ—á–∏—Å—Ç–∫–∞) ---\"\n# CUSTOM_CONFIG_JSON=\'{\"processing_type\": \"clean\"}\' # –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ config\n# trigger_api_endpoint \"/api/heavy/data/custom-process\" \"–ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\" \"POST\" \"$CUSTOM_CONFIG_JSON\"\n\necho \"\nüéâ –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.\"\n 