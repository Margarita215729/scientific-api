# Multi-stage build for Scientific API with Database
FROM python:3.11-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    gfortran \
    libopenblas-dev \
    liblapack-dev \
    pkg-config \
    curl \
    wget \
    git \
    sqlite3 \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
COPY requirements_azure.txt .
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -r requirements_azure.txt

# Production stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libopenblas0 \
    liblapack3 \
    sqlite3 \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd --create-home --shell /bin/bash app

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . .

# Create database directory
RUN mkdir -p /app/database && chown -R app:app /app

# Switch to app user
USER app

# Create initialization script
RUN echo '#!/usr/bin/env python3\n\
import asyncio\n\
import sys\n\
sys.path.append("/app")\n\
from database.config import db\n\
\n\
async def init_db():\n\
    try:\n\
        await db.init_database()\n\
        print("Database initialized successfully")\n\
    except Exception as e:\n\
        print(f"Database initialization failed: {e}")\n\
\n\
if __name__ == "__main__":\n\
    asyncio.run(init_db())\n\
' > /app/init_db.py && chmod +x /app/init_db.py

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/ping || exit 1

# Expose port
EXPOSE 8000

# Start command
CMD ["python", "main_azure_with_db.py"] 